name: Deploy Project

on:
  push:
    branches:
      - deploy

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
      PROJECT_PORT: ${{ secrets.PROJECT_PORT }}
      ENV_TEXT: ${{ secrets.ENV_TEXT }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create .env file from secret
        run: echo "${{ env.ENV_TEXT }}" > backend/.env

      - name: Build Docker Image
        run: docker build -t ${{ env.PROJECT_NAME }} .

      - name: Save Docker image as tar
        run: docker save ${{ env.PROJECT_NAME }} -o ${{ env.PROJECT_NAME }}.tar

      - name: Ensure remote directory exists
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_ADDRESS }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            mkdir -p Desktop/containers/${{ env.PROJECT_NAME }}

      - name: Transfer Docker image to remote server
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SERVER_ADDRESS }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          source: "./${{ env.PROJECT_NAME }}.tar"
          target: "Desktop/containers/${{ env.PROJECT_NAME }}"
          debug: true

      - name: Transfer docker-compose.yml to remote server
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SERVER_ADDRESS }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          source: "./docker-compose.yml"
          target: "Desktop/containers/${{ env.PROJECT_NAME }}"

      - name: Load image & deploy via colima nerdctl on remote
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_ADDRESS }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            export PATH="/opt/homebrew/bin:/usr/local/bin:$PATH"
            cd Desktop/containers/${{ env.PROJECT_NAME }}

            if [ ! -f ${{ env.PROJECT_NAME }}.tar ]; then
              echo "Image tar not found!"
              exit 1
            fi

            old=$(colima nerdctl -- images -q ${{ env.PROJECT_NAME }}:latest)
            [ -n "$old" ] && colima nerdctl -- rmi -f $old

            colima nerdctl -- load -i ${{ env.PROJECT_NAME }}.tar

            cat <<EOF > .env
            PROJECT_NAME=${{ env.PROJECT_NAME }}
            PROJECT_PORT=${{ env.PROJECT_PORT }}
            EOF

            colima nerdctl -- compose --env-file .env down
            colima nerdctl -- compose --env-file .env up -d

      - name: Cleanup local Docker image tar
        run: rm ${{ env.PROJECT_NAME }}.tar